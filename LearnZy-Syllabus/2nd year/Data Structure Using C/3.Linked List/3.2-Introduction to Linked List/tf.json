[
    {
      "id": 1,
      "question": "A linked list is a linear data structure where elements are stored in contiguous memory locations.",
      "answer": false
    },
    {
      "id": 2,
      "question": "Each node in a singly linked list has only one pointer to the next node.",
      "answer": true
    },
    {
      "id": 3,
      "question": "In a circular linked list, the last node points to the first node.",
      "answer": true
    },
    {
      "id": 4,
      "question": "In a doubly linked list, each node has pointers to both its previous and next nodes.",
      "answer": true
    },
    {
      "id": 5,
      "question": "The first node in a linked list is called the tail node.",
      "answer": false
    },
    {
      "id": 6,
      "question": "A linked list cannot be used to implement stacks and queues.",
      "answer": false
    },
    {
      "id": 7,
      "question": "Memory for a linked list is allocated dynamically.",
      "answer": true
    },
    {
      "id": 8,
      "question": "A doubly linked list allows traversal in both forward and backward directions.",
      "answer": true
    },
    {
      "id": 9,
      "question": "A circular linked list has no end node.",
      "answer": false
    },
    {
      "id": 10,
      "question": "A linked list uses indexes for accessing elements like an array.",
      "answer": false
    },
    {
      "id": 11,
      "question": "In a singly linked list, deleting a node requires modifying the previous node's pointer.",
      "answer": true
    },
    {
      "id": 12,
      "question": "A linked list is more memory efficient than an array when frequent insertions and deletions are required.",
      "answer": true
    },
    {
      "id": 13,
      "question": "The head pointer of a linked list points to the last node.",
      "answer": false
    },
    {
      "id": 14,
      "question": "Circular linked lists can be either singly or doubly linked.",
      "answer": true
    },
    {
      "id": 15,
      "question": "In a linked list, elements are stored sequentially in memory.",
      "answer": false
    },
    {
      "id": 16,
      "question": "A linked list can dynamically increase or decrease in size as needed.",
      "answer": true
    },
    {
      "id": 17,
      "question": "The last node of a singly linked list always points to NULL.",
      "answer": true
    },
    {
      "id": 18,
      "question": "Traversing a linked list requires using a loop or recursion.",
      "answer": true
    },
    {
      "id": 19,
      "question": "A linked list cannot contain duplicate values.",
      "answer": false
    },
    {
      "id": 20,
      "question": "A linked list is a type of non-linear data structure.",
      "answer": false
    },
    {
      "id": 21,
      "question": "Stacks can be implemented using linked lists.",
      "answer": true
    },
    {
      "id": 22,
      "question": "Queues cannot be implemented using linked lists.",
      "answer": false
    },
    {
      "id": 23,
      "question": "Inserting a node at the beginning of a linked list requires O(1) time complexity.",
      "answer": true
    },
    {
      "id": 24,
      "question": "Deleting the last node in a singly linked list requires traversing the entire list.",
      "answer": true
    },
    {
      "id": 25,
      "question": "A linked list can have cycles, where a node points to a previous node instead of NULL.",
      "answer": true
    },
    {
      "id": 26,
      "question": "A circular doubly linked list does not have a NULL pointer at the end.",
      "answer": true
    },
    {
      "id": 27,
      "question": "In a linked list, the tail node points to the head node in all cases.",
      "answer": false
    },
    {
      "id": 28,
      "question": "Searching in a linked list is faster than searching in an array.",
      "answer": false
    },
    {
      "id": 29,
      "question": "A linked list requires more memory per node compared to an array due to pointers.",
      "answer": true
    },
    {
      "id": 30,
      "question": "Linked lists are not suitable for implementing undo functionality in applications.",
      "answer": false
    },
    {
      "id": 31,
      "question": "The complexity of accessing an element in a linked list is O(1).",
      "answer": false
    },
    {
      "id": 32,
      "question": "A self-referential structure is commonly used to implement linked lists in C.",
      "answer": true
    },
    {
      "id": 33,
      "question": "Inserting a node in the middle of a linked list requires adjusting only one pointer.",
      "answer": false
    },
    {
      "id": 34,
      "question": "Circular linked lists are useful for applications like multiplayer games and CPU scheduling.",
      "answer": true
    },
    {
      "id": 35,
      "question": "The last node in a doubly linked list contains a NULL pointer for its next reference.",
      "answer": true
    },
    {
      "id": 36,
      "question": "A linked list with only one node is still considered a valid linked list.",
      "answer": true
    },
    {
      "id": 37,
      "question": "Doubly linked lists require twice the memory per node compared to singly linked lists.",
      "answer": true
    },
    {
      "id": 38,
      "question": "The free() function in C is used to deallocate memory for a linked list node.",
      "answer": true
    },
    {
      "id": 39,
      "question": "A linked list can be reversed by modifying its pointers instead of swapping data.",
      "answer": true
    },
    {
      "id": 40,
      "question": "A sorted linked list is always more efficient than an unsorted linked list.",
      "answer": false
    },
    {
      "id": 41,
      "question": "Circular linked lists are not used in real-world applications.",
      "answer": false
    },
    {
      "id": 42,
      "question": "A doubly linked list is more memory-efficient than a singly linked list.",
      "answer": false
    },
    {
      "id": 43,
      "question": "A linked list can be implemented using an array instead of pointers.",
      "answer": false
    },
    {
      "id": 44,
      "question": "The slowest operation in a linked list is accessing an element by index.",
      "answer": true
    },
    {
      "id": 45,
      "question": "To delete a node in a linked list, modifying the head pointer is always necessary.",
      "answer": false
    },
    {
      "id": 46,
      "question": "A queue implemented using a linked list follows a FIFO (First In, First Out) order.",
      "answer": true
    },
    {
      "id": 47,
      "question": "Linked lists can be implemented using structures in C.",
      "answer": true
    },
    {
      "id": 48,
      "question": "A stack implemented using a linked list follows a LIFO (Last In, First Out) order.",
      "answer": true
    },
    {
      "id": 49,
      "question": "The space complexity of a linked list is always O(1).",
      "answer": false
    },
    {
      "id": 50,
      "question": "A linked list is the best choice when constant-time random access is required.",
      "answer": false
    }
  ]
  